[{"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/index.js":"1","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/App.js":"2","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/reportWebVitals.js":"3","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Login.js":"4","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Signup.js":"5","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Home.js":"6","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Profile.js":"7","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Header/index.js":"8","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Footer/index.js":"9","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/ChartEditor.js":"10","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/queries.js":"11","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/mutations.js":"12","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/auth.js":"13","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Charts/LineChart.js":"14"},{"size":546,"mtime":1694614364270,"results":"15","hashOfConfig":"16"},{"size":1913,"mtime":1694614364269,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1694614364270,"results":"18","hashOfConfig":"16"},{"size":2650,"mtime":1694614364270,"results":"19","hashOfConfig":"16"},{"size":2946,"mtime":1694614364270,"results":"20","hashOfConfig":"16"},{"size":362,"mtime":1694614364270,"results":"21","hashOfConfig":"16"},{"size":3778,"mtime":1694614364270,"results":"22","hashOfConfig":"16"},{"size":1253,"mtime":1694614364270,"results":"23","hashOfConfig":"16"},{"size":831,"mtime":1694614364270,"results":"24","hashOfConfig":"16"},{"size":5378,"mtime":1694614364270,"results":"25","hashOfConfig":"16"},{"size":229,"mtime":1694614364271,"results":"26","hashOfConfig":"16"},{"size":1133,"mtime":1694614364271,"results":"27","hashOfConfig":"16"},{"size":1043,"mtime":1694614364270,"results":"28","hashOfConfig":"16"},{"size":429,"mtime":1694614364270,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ul813",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/index.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/App.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/reportWebVitals.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Login.js",["62"],"import React, { useState } from 'react';\nimport { Card, Form, Button } from 'react-bootstrap'\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n\n    <Card style={{ width: '50%' }}>\n      <Card.Body>\n        <Card.Title>Welcome Back!</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">Login to your account</Card.Subtitle>\n\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control \n              className=\"form-input\"\n              placeholder=\"Enter email\"\n              name=\"email\"\n              type=\"email\"\n              value={formState.email}\n              onChange={handleChange}\n              \n            />\n            <Form.Text className=\"text-muted\">\n              We'll never share your email with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control \n              className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n                \n            />\n          </Form.Group>\n\n          <Button \n            variant=\"primary\" \n            type=\"submit\"\n            onClick={handleFormSubmit}\n          >\n            Submit\n          </Button>\n          {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n        </Form>\n        <br />\n        <Card.Link href=\"/signup\">Don't have an account? Sign Up!</Card.Link>\n\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Login;\n","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Signup.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Home.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/pages/Profile.js",["63","64","65","66"],"import React, { useEffect, useState } from 'react';\nimport {useQuery, useMutation} from '@apollo/client'\nimport {QUERY_ME} from '../utils/queries'\nimport {REMOVE_GRAPH} from '../utils/mutations'\nimport {Form, Button, Offcanvas, Container, Row, Col} from 'react-bootstrap'\nimport LineChart from '../components/Charts/LineChart'\nimport ChartEditor from '../components/ChartEditor';\n\n\nimport Auth from '../utils/auth';\n\nconst Profile = () => {\n\n  const {loading, data} = useQuery(QUERY_ME)\n  const [removeGraph] = useMutation(REMOVE_GRAPH)\n  const graphData = data?.me || {}\n\n  const [show, setShow] = useState(false);\n  const [currentGraph, setCurrentGraph] = useState({\n    id:'',\n    title:'',\n    labels:[],\n    data:[]\n    })\n  const [graphHistory, setGraphHistory] = useState([])\n  const [title, setTitle] = useState('')\n\n  useEffect(() => {\n    if(!loading){\n      setGraphHistory(graphData.graphs)\n    }\n  },[loading])\n    \n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const handleNew = () => {\n    setCurrentGraph({\n      id:'',\n      title:'',\n      labels:[],\n      data:[]\n      })\n      setTitle('')\n  }\n\n  if (!Auth.loggedIn()) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n  else \n  return (\n    <div>\n      <h2 style={{textAlign:'center',margin:'3rem'}}>Viewing {Auth.getProfile().data.username}'s profile.</h2>\n      <div style={{marginBottom:'2rem'}}>\n      <Button \n        variant=\"primary\" \n        onClick={handleShow}>\n        Graph List\n      </Button>\n      <Button \n        variant=\"outline-primary\" \n        onClick={() => handleNew()}\n        style={{marginLeft:'2rem'}}>\n        New Graph\n      </Button>\n      </div>\n\n      <Offcanvas show={show} onHide={handleClose}  placement={'end'}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Saved Graphs</Offcanvas.Title>\n        </Offcanvas.Header>\n\n        <Offcanvas.Body>\n\n          {!loading && graphHistory.map((el) => (\n              <Container id='canvas_row' style={el.id === currentGraph.id?{borderColor:'#00BFFF', backgroundColor:'#00BFFF'}:{borderColor:'black'}} key={el._id}>\n                <Col xs={6}>\n                <p style={{fontWeight:'bold', overflow:'hidden', textOverflow:'ellipsis', whiteSpace:'nowrap'}}>{el.title}</p>\n                <p>{el.labels.length} data points</p>\n                </Col>\n\n                <Col>\n                <Button \n                variant=\"success\"\n                onClick={() => {\n                  setCurrentGraph(el)\n                  setTitle(el.title)\n                  console.log(el)\n                }}\n                >Update</Button>\n                </Col>\n\n                <Col>\n                <Button \n                variant=\"danger\"\n                onClick={async () => {\n                  let thisId = el.id\n                  const filteredArr = graphHistory.filter((el) => el.id !== thisId)\n              \n                  setGraphHistory(filteredArr)\n\n                  try{\n                    const {data} = await removeGraph({\n                      variables: {\n                        id: thisId\n                      }\n                    })\n                    console.log(data)\n                  }catch(err){\n                    console.log(err)\n                  }\n                }}\n                >Delete</Button>\n                </Col>\n              </Container>)\n            )}\n\n        </Offcanvas.Body>\n      </Offcanvas>\n\n      <ChartEditor currentGraph={currentGraph} setCurrentGraph={setCurrentGraph} setGraphHistory={setGraphHistory} graphHistory={graphHistory} title={title} setTitle={setTitle}/>\n\n    </div>\n  );\n};\n\nexport default Profile;\n","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Header/index.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Footer/index.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/ChartEditor.js",["67","68","69","70","71","72"],"import React, {useState, useRef, useEffect} from 'react';\nimport {useMutation} from '@apollo/client'\nimport { v4 as uuidv4 } from 'uuid'\nimport {Container, Form, Button, FormGroup} from 'react-bootstrap'\nimport LineChart from './Charts/LineChart';\nimport { ADD_GRAPH, UPDATE_GRAPH } from '../utils/mutations';\n\nconst ChartEditor = ({currentGraph, setCurrentGraph, setGraphHistory, graphHistory, title, setTitle}) => {\n    const [x, setX] = useState('')\n    const [y, setY] = useState('')\n    const [updateGraph, {error}] = useMutation(UPDATE_GRAPH)\n    const [addGraph] = useMutation(ADD_GRAPH)\n    const labelsRef = useRef()\n    const dataRef = useRef()\n  \n    const handleGraph = async (e) => {\n      console.log('saving...', labelsRef.current.value, dataRef.current.value)\n      e.preventDefault()\n      if(title !==''){\n        \n        let db_X = 'N/A'\n        let db_Y = '0'\n        const num = y\n        const string = x\n        const updatedGraph = {...currentGraph}\n        if(x !== '' && y !== ''){\n          console.log(x,y,updatedGraph)\n          updatedGraph.labels = [...updatedGraph.labels, x]\n          updatedGraph.data = [...updatedGraph.data, y]\n          db_X = x\n          db_Y = y\n        }\n        updatedGraph.title = title\n\n        setCurrentGraph(updatedGraph)\n        \n        console.log('handling save for id: ', currentGraph.id, 'and title: ', title)\n\n\n        if(currentGraph.id === ''){\n            updatedGraph.id = uuidv4()\n            setGraphHistory((prev) => [...prev, updatedGraph])\n            console.log('added graph array: ', updatedGraph.id,db_X,db_Y,title)\n\n            try{\n              const {data} = await addGraph({\n                variables: {\n                  id: updatedGraph.id,\n                  title: title,\n                  labels: db_X,\n                  data: db_Y\n                }\n              })\n              console.log(data)\n            } catch (err){\n              console.log('errors found: ', err)\n            }\n        }\n        else if (updatedGraph.title !== currentGraph.title || (x !== '' && y !== '')){\n            const updatedArr = graphHistory.map((el) =>{\n                if(el.id===updatedGraph.id){\n                    return el = updatedGraph\n                }\n                else{\n                    return el\n                }\n            })\n            console.log('updated graph array: ', currentGraph.id,db_X,db_Y,title)\n            setGraphHistory(updatedArr)\n            try{\n              const {data} = await updateGraph({\n                variables: {\n                  id: currentGraph.id,\n                  title: title,\n                  labels: db_X,\n                  data:  db_Y,\n                }\n              })\n              console.log(data)\n            } catch (err){\n              console.log('errors found: ', err)\n            }\n        }\n        console.log('finish')\n\n        setX('')\n        setY('')\n      }\n    }\n\n    const handleGrapher = async (e) => {\n      e.preventDefault()\n      setX('')\n      setY('')\n      console.log(currentGraph)\n      console.log(labelsRef.current.value, dataRef.current.value)\n      try{\n        const {data} = await addGraph({\n          variables: {\n            id: uuidv4(),\n            title: title,\n            labels: x,\n            data: y,\n          },\n        })\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n    return (\n        <Container>\n\n        <Form style={{width:'50%'}}>\n            \n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Chart Title</Form.Label>\n            <Form.Control \n              type=\"text\" \n              placeholder=\"Enter Chart Title...\"\n              value={title} \n              onChange={(event) => setTitle(event.target.value)}\n            />\n            <Form.Text className=\"text-muted\">\n              Name your chart..\n            </Form.Text>\n          </Form.Group>\n  \n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>New Data Label</Form.Label>\n            <Form.Control \n              type=\"text\" \n              placeholder=\"Enter data point label...\"\n              value={x} \n              onChange={(event) => setX(event.target.value)}\n              ref={labelsRef}\n            />\n            <Form.Text className=\"text-muted\">\n              Name this data entry... \n            </Form.Text>\n          </Form.Group>\n  \n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n            <Form.Label>Value</Form.Label>\n            <Form.Control \n              type=\"text\" \n              placeholder=\"Enter Number Value\"\n              value={y}\n              onChange={(event) => setY(event.target.value)}\n              ref={dataRef}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter value of data entry.. \n            </Form.Text>\n          </Form.Group>\n  \n          <Button \n            variant=\"success\"\n            onClick={(e) => handleGraph(e)}\n          >\n            Update and Save\n          </Button>\n          {error && (\n              <div className=\"col-12 my-3 bg-danger text-white p-3\">\n                {error.message}\n              </div>\n            )}\n        </Form>\n        <LineChart l={currentGraph.labels} d={currentGraph.data} title={currentGraph.title}/>\n\n        </Container>\n    );\n};\n\nexport default ChartEditor;","/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/queries.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/mutations.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/utils/auth.js",[],"/Users/nicolasleon/Repos/GraphBuddy/graph-buddy/src/components/Charts/LineChart.js",["73"],"import { Line } from 'react-chartjs-2'\nimport {Chart as ChartJS} from 'chart.js/auto'\n\nconst LineChart = (props) => {\n\n  return (\n    <Line\n      data={{\n        labels: props.l,\n        datasets: [\n          {\n            label: props.title,\n            data: props.d,\n            backgroundColor: '#ff6384',\n            borderColor: 'rgb(75, 192, 192)'\n          },\n        ],\n      }}\n    />\n  );\n};\n\nexport default LineChart;",{"ruleId":"74","severity":1,"message":"75","line":10,"column":26,"nodeType":"76","messageId":"77","endLine":10,"endColumn":30},{"ruleId":"74","severity":1,"message":"78","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":13},{"ruleId":"74","severity":1,"message":"79","line":5,"column":45,"nodeType":"76","messageId":"77","endLine":5,"endColumn":48},{"ruleId":"74","severity":1,"message":"80","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":17},{"ruleId":"81","severity":1,"message":"82","line":32,"column":5,"nodeType":"83","endLine":32,"endColumn":14,"suggestions":"84"},{"ruleId":"74","severity":1,"message":"85","line":1,"column":34,"nodeType":"76","messageId":"77","endLine":1,"endColumn":43},{"ruleId":"74","severity":1,"message":"86","line":4,"column":34,"nodeType":"76","messageId":"77","endLine":4,"endColumn":43},{"ruleId":"74","severity":1,"message":"87","line":23,"column":15,"nodeType":"76","messageId":"77","endLine":23,"endColumn":18},{"ruleId":"74","severity":1,"message":"88","line":24,"column":15,"nodeType":"76","messageId":"77","endLine":24,"endColumn":21},{"ruleId":"74","severity":1,"message":"89","line":91,"column":11,"nodeType":"76","messageId":"77","endLine":91,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":98,"column":16,"nodeType":"76","messageId":"77","endLine":98,"endColumn":20},{"ruleId":"74","severity":1,"message":"90","line":2,"column":18,"nodeType":"76","messageId":"77","endLine":2,"endColumn":25},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Row' is defined but never used.","'LineChart' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'graphData.graphs'. Either include it or remove the dependency array.","ArrayExpression",["91"],"'useEffect' is defined but never used.","'FormGroup' is defined but never used.","'num' is assigned a value but never used.","'string' is assigned a value but never used.","'handleGrapher' is assigned a value but never used.","'ChartJS' is defined but never used.",{"desc":"92","fix":"93"},"Update the dependencies array to be: [graphData.graphs, loading]",{"range":"94","text":"95"},[913,922],"[graphData.graphs, loading]"]